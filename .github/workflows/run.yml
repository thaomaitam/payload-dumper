name: Streaming OTA Partition Extractor (Final Version)

on:
  workflow_dispatch:
    inputs:
      ota_source:
        description: 'URL ƒë·∫øn OTA ZIP (h·ªó tr·ª£ direct streaming extraction)'
        required: true
        type: string
      partitions:
        description: 'Partitions c·∫ßn extract (comma-separated). VD: boot,init_boot,vendor_boot'
        required: true
        default: 'boot,init_boot,vbmeta'
        type: string
      artifact_retention:
        description: 'Retention period (days)'
        required: false
        default: '7'
        type: choice
        options: ['3', '7', '14', '30']

jobs:
  stream-extract:
    name: Direct Streaming Extraction
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: Environment Initialization
        id: init
        run: |
          mkdir -p workspace/{partitions,logs}
          echo "execution_id=$(date +%s)_${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
      
      - name: Python Runtime Configuration
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Streaming payload-dumper
        run: |
          echo "üì¶ Installing payload-dumper..."
          python3 -m pip install --upgrade pip
          pip install --no-cache-dir git+https://github.com/5ec1cff/payload-dumper
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "‚úÖ Installation completed."
      
      - name: Validate Inputs
        id: validate
        run: |
          if ! [[ "${{ github.event.inputs.ota_source }}" =~ ^https?:// ]]; then
            echo "‚ùå Invalid source: Must be a remote URL (http or https)."
            exit 1
          fi
          IFS=',' read -ra PART_ARRAY <<< "${{ github.event.inputs.partitions }}"
          echo "partition_count=${#PART_ARRAY[@]}" >> $GITHUB_OUTPUT
          echo "‚úÖ Validation passed: ${#PART_ARRAY[@]} partitions queued."

      - name: Direct Streaming Extraction
        id: extract
        run: |
          echo "üöÄ Executing direct streaming extraction..."
          echo "  Source: ${{ github.event.inputs.ota_source }}"
          echo "  Target partitions: ${{ github.event.inputs.partitions }}"
          
          cd workspace/partitions
          EXTRACT_START=$(date +%s)
          
          payload_dumper --partitions "${{ github.event.inputs.partitions }}" "${{ github.event.inputs.ota_source }}" 2>&1 | tee ../logs/extraction.log
          
          EXTRACT_STATUS=${PIPESTATUS[0]}
          EXTRACT_END=$(date +%s)
          EXTRACT_DURATION=$((EXTRACT_END - EXTRACT_START))
          echo "extraction_duration=$EXTRACT_DURATION" >> $GITHUB_OUTPUT
          
          if [ $EXTRACT_STATUS -ne 0 ]; then
            echo "‚ùå Extraction failed. See log for details."
            exit 1
          fi
          echo "‚úÖ Streaming extraction completed in ${EXTRACT_DURATION}s."

      - name: Analyze & Report
        id: analyze
        if: success()
        run: |
          echo "üìä Analyzing extracted partitions..."
          cd workspace/partitions/out
          
          EXTRACTED_COUNT=$(ls -1 *.img 2>/dev/null | wc -l)
          echo "extracted_count=$EXTRACTED_COUNT" >> $GITHUB_OUTPUT
          
          if [ $EXTRACTED_COUNT -eq 0 ]; then
            echo "‚ö†Ô∏è No partitions were extracted. The requested partitions may not exist in the payload."
            # G√°n gi√° tr·ªã 0 ƒë·ªÉ c√°c b∆∞·ªõc sau kh√¥ng b·ªã l·ªói
            echo "total_extracted_size=0" >> $GITHUB_OUTPUT
            exit 0 
          fi

          TOTAL_SIZE=$(du -cb *.img | tail -n 1 | awk '{print $1}')
          echo "total_extracted_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT

      - name: Execution Summary
        if: always()
        run: |
          echo "## Extraction Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.extract.outcome }}" == "success" ]; then
            # ƒê√É S·ª¨A L·ªñI C√ö PH√ÅP
            TOTAL_SIZE_BYTES="${{ steps.analyze.outputs.total_extracted_size }}"
            TOTAL_SIZE_MB=$(( ${TOTAL_SIZE_BYTES:-0} / 1024 / 1024 ))

            echo "- **Duration**: **${{ steps.extract.outputs.extraction_duration }}s**" >> $GITHUB_STEP_SUMMARY
            echo "- **Partitions Extracted**: **${{ steps.analyze.outputs.extracted_count }}** / ${{ steps.validate.outputs.partition_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Size**: **$TOTAL_SIZE_MB MB**" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.analyze.outputs.extracted_count }}" -gt 0 ]; then
              echo "### Extracted Files:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ls -lh workspace/partitions/out/*.img >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "> No partitions were extracted. Check logs for details." >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload Partition Artifacts
        if: steps.analyze.outputs.extracted_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: extracted-partitions-${{ steps.init.outputs.execution_id }}
          path: workspace/partitions/out/*.img
          retention-days: ${{ github.event.inputs.artifact_retention }}

      - name: Upload Execution Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extraction-log-${{ steps.init.outputs.execution_id }}
          path: workspace/logs/extraction.log
          retention-days: 1