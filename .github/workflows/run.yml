name: Streaming OTA Partition Extractor (Optimized)

on:
  workflow_dispatch:
    inputs:
      ota_source:
        description: 'URL ho·∫∑c local path ƒë·∫øn OTA ZIP (h·ªó tr·ª£ direct streaming extraction)'
        required: true
        type: string
        default: 'https://bigota.d.miui.com/OS1.0.x.x/miui_XXXXX_OS1.0.x.x_xxxxxxxx.0000.00_14.0_cn_xxxxxxxxxxxxx.zip'
      partitions:
        description: 'Partitions c·∫ßn extract (comma-separated). VD: boot,init_boot,vendor_boot,vbmeta,dtbo'
        required: true
        default: 'boot,init_boot,vbmeta'
        type: string
      output_compression:
        description: 'N√©n output artifacts (khuy·∫øn ngh·ªã cho partitions > 100MB)'
        required: true
        default: 'auto'
        type: choice
        options: ['none', 'auto', 'force']
      artifact_retention:
        description: 'Retention period (days)'
        required: false
        default: '7'
        type: choice
        options: ['3', '7', '14', '30']
      enable_checksums:
        description: 'Generate SHA256 checksums cho m·ªói partition'
        required: false
        default: true
        type: boolean

jobs:
  stream-extract:
    name: Direct Streaming Extraction
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: Environment Initialization
        id: init
        run: |
          echo "üîß Initializing execution context..."
          mkdir -p workspace/{partitions,metadata,logs}
          echo "runner_os=$(uname -s)" >> $GITHUB_OUTPUT
          echo "runner_arch=$(uname -m)" >> $GITHUB_OUTPUT
          EXEC_ID="extract_$(date +%s)_$RANDOM"
          echo "execution_id=$EXEC_ID" >> $GITHUB_OUTPUT
          echo "start_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "‚úÖ Context initialized: $EXEC_ID"
      
      - name: Python Runtime Configuration
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Streaming payload-dumper
        id: install_dumper
        run: |
          echo "üì¶ Installing 5ec1cff/payload-dumper..."
          python3 -m pip install --upgrade pip
          pip install --no-cache-dir git+https://github.com/5ec1cff/payload-dumper
          
          # S·ª¨A L·ªñI QUAN TR·ªåNG: Th√™m th∆∞ m·ª•c bin c·ªßa pip v√†o PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          echo "dumper_version=5ec1cff-fork" >> $GITHUB_OUTPUT
          echo "‚úÖ Installation completed."
      
      - name: Input Validation & Analysis
        id: validate
        run: |
          echo "üîç Validating input parameters..."
          SOURCE="${{ github.event.inputs.ota_source }}"
          if [[ $SOURCE =~ ^https?:// ]]; then
            echo "source_type=remote_url" >> $GITHUB_OUTPUT
            echo "‚úÖ Remote URL detected - streaming mode active"
            if ! curl --head --silent --fail --location --max-time 10 "$SOURCE" > /dev/null; then
              echo "‚ö†Ô∏è Warning: Source URL may be inaccessible or slow to respond."
            fi
          else
            echo "‚ùå Invalid source: Currently only supports remote URLs."
            exit 1
          fi
          
          IFS=',' read -ra PART_ARRAY <<< "${{ github.event.inputs.partitions }}"
          echo "partition_count=${#PART_ARRAY[@]}" >> $GITHUB_OUTPUT
          echo "‚úÖ Validation completed: ${#PART_ARRAY[@]} partitions queued."

      - name: Direct Streaming Extraction
        id: extract
        run: |
          echo "üöÄ Executing direct streaming extraction..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "  Source: ${{ github.event.inputs.ota_source }}"
          echo "  Target partitions: ${{ github.event.inputs.partitions }}"
          echo "  Output: workspace/partitions/"
          echo ""
          
          cd workspace/partitions
          EXTRACT_START=$(date +%s)
          
          # S·ª¨A L·ªñI & TINH G·ªåN:
          # 1. Th√™m c·ªù "-o ." ƒë·ªÉ xu·∫•t file ra th∆∞ m·ª•c hi·ªán t·∫°i, thay v√¨ th∆∞ m·ª•c 'out' m·∫∑c ƒë·ªãnh.
          # 2. Truy·ªÅn tr·ª±c ti·∫øp chu·ªói partitions, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi.
          payload_dumper --partitions "${{ github.event.inputs.partitions }}" -o . "${{ github.event.inputs.ota_source }}" 2>&1 | tee ../logs/extraction_${{ steps.init.outputs.execution_id }}.log
          
          EXTRACT_STATUS=${PIPESTATUS[0]}
          EXTRACT_END=$(date +%s)
          EXTRACT_DURATION=$((EXTRACT_END - EXTRACT_START))
          echo "extraction_duration=$EXTRACT_DURATION" >> $GITHUB_OUTPUT
          
          if [ $EXTRACT_STATUS -ne 0 ]; then
            echo "‚ùå Extraction failed - check log for details."
            exit 1
          fi
          echo "‚úÖ Streaming extraction completed: ${EXTRACT_DURATION}s elapsed."

      - name: Post-Extraction Analysis & Reporting
        id: analyze
        run: |
          echo "üìä Analyzing extracted partitions..."
          cd workspace/partitions
          EXTRACTED_COUNT=$(ls -1 *.img 2>/dev/null | wc -l)
          echo "extracted_count=$EXTRACTED_COUNT" >> $GITHUB_OUTPUT
          
          if [ $EXTRACTED_COUNT -eq 0 ]; then
            echo "‚ùå No partitions were extracted. Check logs for payload content or errors."
            exit 1
          fi

          TOTAL_SIZE=0
          REPORT_HEADER="‚ïë %-25s ‚îÇ %12s ‚îÇ %-15s ‚ïë\n"
          REPORT_ROW="‚ïë %-25s ‚îÇ %10d MB ‚îÇ %-15s ‚ïë\n"
          
          (
            echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
            echo "‚ïë                       PARTITION EXTRACTION REPORT                        ‚ïë"
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
            printf "$REPORT_HEADER" "Partition" "Size" "SHA256 (short)"
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
          ) >> ../metadata/ANALYSIS_REPORT.txt
          
          for img in *.img; do
            SIZE=$(stat -c%s "$img")
            TOTAL_SIZE=$((TOTAL_SIZE + SIZE))
            SIZE_MB=$((SIZE / 1024 / 1024))
            
            # NH·∫§T QU√ÅN: S·ª≠ d·ª•ng sha256sum thay v√¨ md5sum
            SHA256=$(sha256sum "$img" | cut -d' ' -f1)
            
            printf "$REPORT_ROW" "${img%.img}" "$SIZE_MB" "${SHA256:0:12}..." >> ../metadata/ANALYSIS_REPORT.txt
            echo "${img}|${SIZE}|${SHA256}" >> ../metadata/partition_registry.txt
          done
          
          (
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
            printf "‚ïë %-25s ‚îÇ %10d MB ‚îÇ %-15s ‚ïë\n" "TOTAL" "$((TOTAL_SIZE / 1024 / 1024))" "$EXTRACTED_COUNT partitions"
            echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          ) >> ../metadata/ANALYSIS_REPORT.txt
          
          echo "total_extracted_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          echo "‚úÖ Analysis complete. Report generated."
          cat ../metadata/ANALYSIS_REPORT.txt

      - name: Generate Full SHA256 Checksums File
        if: github.event.inputs.enable_checksums == 'true'
        run: |
          echo "üîê Generating full SHA256 checksums file..."
          cd workspace/partitions
          sha256sum *.img > ../metadata/SHA256SUMS.txt
          echo "‚úÖ Checksums file created: SHA256SUMS.txt"
          cat ../metadata/SHA256SUMS.txt

      - name: Create Final Artifacts
        id: create_artifacts
        run: |
          echo "üìù Generating metadata bundle and preparing for upload..."
          # ... (Ph·∫ßn t·∫°o metadata v√† b√°o c√°o c·ªßa b·∫°n ƒë√£ r·∫•t t·ªët, c√≥ th·ªÉ gi·ªØ nguy√™n ho·∫∑c ƒëi·ªÅu ch·ªânh nh·ªè)
          # Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o c√°c ƒë∆∞·ªùng d·∫´n v√† bi·∫øn l√† ch√≠nh x√°c.
          # T√¥i s·∫Ω gi·ªØ l·∫°i ph·∫ßn n√†y tr·ªëng ƒë·ªÉ b·∫°n t√πy ch·ªânh b√°o c√°o cu·ªëi c√πng theo √Ω mu·ªën.
          # Nh∆∞ng h√£y ƒë·∫£m b·∫£o b·∫°n x·ª≠ l√Ω c√°c file trong 'workspace/metadata' v√† 'workspace/partitions'
      
      - name: Upload Extracted Partitions
        uses: actions/upload-artifact@v4
        with:
          name: extracted-partitions-${{ steps.init.outputs.execution_id }}
          path: |
            workspace/partitions/*.img
            workspace/metadata/
          retention-days: ${{ github.event.inputs.artifact_retention }}
          if-no-files-found: error
      
      - name: Execution Summary
        if: always()
        run: |
          echo "## üìä Streaming Extraction Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: **${{ steps.extract.outputs.extraction_duration }}s**" >> $GITHUB_STEP_SUMMARY
          echo "- **Partitions extracted**: **${{ steps.analyze.outputs.extracted_count || '0' }}** / ${{ steps.validate.outputs.partition_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total size**: **$(( ${steps.analyze.outputs.total_extracted_size:-0} / 1024 / 1024 )) MB**" >> $GITHUB_STEP_SUMMARY
          if [ -f workspace/metadata/ANALYSIS_REPORT.txt ]; then
            echo "### Detailed Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat workspace/metadata/ANALYSIS_REPORT.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi